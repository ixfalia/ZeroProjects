//Copyright: © 2016 DigiPen, All Rights Reserved.

//Class: UIMenuManager
//Brief: This component is intended to be used with the UIButton component. This component
// should be attached to an object that is the parent of all objects that have a UIButton
// component within a level.

class UIMenuManager : ZilchComponent
{
    // Should the component be active or not
    [Property]
    var Active : Boolean = true;
    
    // The CogPath for the selection arrow pointing to selected button
    [Property] 
    var SelectionArrow : CogPath = null;
    
    // The offset of the selection arrow relative to selected button
    [Property] 
    var ArrowOffset : Real3 = Real3();
    
    function Initialize(init : CogInitializer)
    {
      // Connect to dispatched UIButton event
      Zero.Connect(this.Space, Events.UIButtonEvent, this.OnUIButtonEvent);
    }
    
    // Response function called when the UIButtonEvent is heard
    function OnUIButtonEvent(event : UIButtonEvent)
    {
        // If the component is set to not active, do nothing
        if(!this.Active)
        {
            return;
        }
        
        // Check the button's previous state and respond to it by calling the appropriate 
        // response function and passing in the button that is being interacted with
        // (i.e., the one that dispatched the event)
        if(event.State == ButtonState.Default)
        {
            this.OnButtonDefault(event.Button);
        }
        else if(event.State == ButtonState.Hovered)
        {
            this.OnButtonHovered(event.Button);
        }
        // If ClickedState, also pass in the level to load along with the button
        else if(event.State == ButtonState.Clicked)
        {
            this.OnButtonClicked(event.Button, event.LevelToLoad);
        }
        else
        {
            // Debug warning that shouldn't fire using basic functionality
            Console.WriteLine("Button `event.Button.Name` with text `event.Button.SpriteText.Text` is in invalid state `event.State`");
        }
    }
    
    /****************************************************************************************/
    /* The following three functions are the response functions called from within the      */
    /* OnUIButtonEvent function directly above. One of the three will be called depending   */
    /* on which state the button is in when the UIButtonEvent was dispatched: either the    */
    /* Default state, Hovered state, or Clicked state.                                      */
    /****************************************************************************************/
    
    // Used to respond to buttons changing to the default state generically
    function OnButtonDefault(button : Cog)
    {
      // Check to see if the SelectionArrow is being used in this level
      if(this.SelectionArrow.Cog != null)
      {
        // If so, make it invisible
        this.SelectionArrow.Cog.Sprite.Visible = false;
      }
    }
    
    // Used to respond to buttons changing to the hovered state generically
    function OnButtonHovered(button : Cog)
    {
      // Check to see if the SelectionArrow is being used in this level
      if(this.SelectionArrow.Cog != null)
      {
        // If buttons are on the confirmation window
        if(button.Name == "ConfirmYesButton" || button.Name == "ConfirmNoButton")
        {
          // Make the selection arrow is invisible
          this.SelectionArrow.Cog.Sprite.Visible = false;
        }
        // If the button is anywhere else (i.e., the main menu)
        else
        {
          // Make the selection arrow visible
          this.SelectionArrow.Cog.Sprite.Visible = true;
          
          // Offset the position of SelectionArrow relative to the current button
          this.SelectionArrow.Cog.Transform.Translation = button.Transform.Translation + this.ArrowOffset;
        }
      }
    }
    
    // Used to respond to buttons changing to the clicked state generically
    function OnButtonClicked(button : Cog, levelToLoad : Level)
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        // This is where you check which button was activated and perform unique logic such as loading levels //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        // Call Default response function to clear the SelectionArrow
        this.OnButtonDefault(button);
        
        // Check to see if the button is one that loads a level; if it is, load the level.
        if(button.Name == "StartGameButton" ||
           button.Name == "HowToPlayButton" ||
           button.Name == "CreditsButton" ||
           button.Name == "ReturnButton")
        {
          this.Space.LoadLevel(levelToLoad);
        }
        
        // If the button is meant to quit the game...
        else if(button.Name == "QuitButton")
        {
          //Create a new instance of the event that requests the confirmation window
          var conReq = ConfirmationPopUpRequest();
          // Set event's Source variable to this object
          conReq.Source = this.Owner;
          // Dispatch the event onto the space
          this.Space.DispatchEvent(Events.ConfirmationPopUpRequest, conReq);
          
          // Connect to the UIButtonEvent being dispatched from the new space where
          // the confirmation window exists.
          Zero.Connect(this.LevelSettings.ConfirmationPopUp.ConSpace, Events.UIButtonEvent, this.OnUIButtonEvent);
        }
        
        // If the button confirms that the player wishes to quit...
        else if(button.Name == "ConfirmYesButton")
        {
          // Create a new instance of the event that sends a confirmation response
          var conEvent = ConfirmationPopUpResponse();
          // Sets the event's Response variable (true means to confirm quit)
          conEvent.Response = true;
          // Dispatch the event onto the space
          this.Space.DispatchEvent(Events.ConfirmationPopUpResponse, conEvent);
        }
        
        // If the button denies that the player wishes to exit...
        else if(button.Name == "ConfirmNoButton")
        {
          // Create a new instance of the event that sends a confirmation response
          var conEvent = ConfirmationPopUpResponse();
          // Sets the event's Response variable (false means to deny quit)
          conEvent.Response = false;
          // Dispatch the event onto the space
          this.Space.DispatchEvent(Events.ConfirmationPopUpResponse, conEvent);
        }
    }
    
    // Used to activate or deactivate the Reactive components on the
    // non-confirmation buttons in the current level
    function SetChildrenReactive(val : Boolean)
    {
        // Iterate through the buttons parented to the buttons parent object (i.e., this.Owner)
        foreach(var child in this.Owner.Children)
        {
          // Activate or deactivate Reactive component based on passed in boolean (i.e, val)
          child.Reactive.Active = val;
        }
    }
}
